<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Maestro.Wpf"
    xmlns:controls="clr-namespace:Maestro.Wpf.Controls"
    xmlns:converters="clr-namespace:Maestro.Wpf.Converters">

    <converters:FontSizeToHeightConverter x:Key="FontSizeToHeightConverter"/>
    <converters:FontSizeToLineHeightConverter x:Key="FontSizeToLineHeightConverter"/>
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <Style TargetType="Window">
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <Style TargetType="UserControl">
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <!-- Global Styles -->
    <Style x:Key="ControlBaseStyle" TargetType="{x:Type Control}">
        <Setter Property="Background" Value="{x:Static local:Theme.BackgroundColor}"/>
        <Setter Property="Foreground" Value="{x:Static local:Theme.GenericTextColor}"/>
        <Setter Property="FontFamily" Value="{x:Static local:Theme.FontFamily}" />
        <Setter Property="FontSize" Value="{x:Static local:Theme.FontSize}" />
        <Setter Property="FontWeight" Value="{x:Static local:Theme.FontWeight}"/>
    </Style>

    <Style x:Key="TextBaseStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{x:Static local:Theme.FontFamily}" />
        <Setter Property="FontSize" Value="{x:Static local:Theme.FontSize}" />
        <Setter Property="FontWeight" Value="{x:Static local:Theme.FontWeight}"/>

        <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="Height" Value="{Binding Source={x:Static local:Theme.FontSize}, Converter={StaticResource FontSizeToHeightConverter}}" />
        <Setter Property="LineHeight" Value="{Binding Source={x:Static local:Theme.FontSize}, Converter={StaticResource FontSizeToLineHeightConverter}}" />
    </Style>

    <Style x:Key="GenericTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBaseStyle}">
        <Setter Property="Foreground" Value="{x:Static local:Theme.GenericTextColor}" />
    </Style>

    <Style x:Key="InteractiveTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBaseStyle}">
        <Setter Property="Foreground" Value="{x:Static local:Theme.InteractiveTextColor}" />
    </Style>

    <!-- Button Styling -->
    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ControlBaseStyle}">

        <Setter Property="Foreground" Value="{x:Static local:Theme.InteractiveTextColor}" />

        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="TextBlock.LineHeight" Value="{Binding Source={x:Static local:Theme.FontSize}, Converter={StaticResource FontSizeToLineHeightConverter}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{x:Static local:Theme.BackgroundColor}">
                        <controls:BeveledBorder
                            BorderThickness="{x:Static local:Theme.BeveledBorderThickness}"
                            BevelType="Raised">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"/>
                            </Border>
                        </controls:BeveledBorder>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{x:Static local:Theme.BackgroundColor}">
                                <controls:BeveledBorder
                                    BorderThickness="{x:Static local:Theme.BeveledBorderThickness}"
                                    BevelType="Sunken">
                                    <Border Background="{TemplateBinding Background}">
                                        <ContentPresenter
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center" />
                                    </Border>
                                </controls:BeveledBorder>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{x:Static local:Theme.NonInteractiveTextColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- TextBox -->
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Foreground" Value="{x:Static local:Theme.InteractiveTextColor}"/>
        <Setter Property="FontFamily" Value="{x:Static local:Theme.FontFamily}"/>
        <Setter Property="FontSize" Value="{x:Static local:Theme.FontSize}"/>
        <Setter Property="FontWeight" Value="{x:Static local:Theme.FontWeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <controls:BeveledBorder BorderThickness="{x:Static local:Theme.BeveledBorderThickness}" BevelType="Sunken">
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </controls:BeveledBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{x:Static local:Theme.GenericTextColor}"/>
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ComboBox Button -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Background="{x:Static local:Theme.BackgroundColor}">
            <controls:BeveledBorder
                x:Name="Border"
                BorderThickness="{x:Static local:Theme.BeveledBorderThickness}"
                BevelType="Raised" />
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Border" Property="BevelType" Value="Sunken"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ComboBox -->
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ControlBaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{x:Static local:Theme.InteractiveTextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton
                            Name="ToggleButton"
                            Template="{StaticResource ComboBoxToggleButton}"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press" />

                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center" />

                        <Popup
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Focusable="False"
                            PopupAnimation="None">
                            <Border Background="{x:Static local:Theme.BackgroundColor}">
                                <controls:BeveledBorder BevelType="Raised" BorderThickness="{x:Static local:Theme.BeveledBorderThickness}">
                                    <Grid
                                    Name="DropDown"
                                    SnapsToDevicePixels="True"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    Background="{x:Static local:Theme.BackgroundColor}">
                                        <ScrollViewer SnapsToDevicePixels="True">
                                            <ItemsPresenter />
                                        </ScrollViewer>
                                    </Grid>
                                </controls:BeveledBorder>
                            </Border>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{x:Static local:Theme.NonInteractiveTextColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Item -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource ControlBaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{x:Static local:Theme.InteractiveTextColor}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        Name="Border"
                        SnapsToDevicePixels="true"
                        Padding="2,0,2,0">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- TODO: Separate color for combobox hover -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{x:Static local:Theme.DarkBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{x:Static local:Theme.NonInteractiveTextColor}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Context Menu -->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HasDropShadow" Value="False"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <StackPanel IsItemsHost="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Context Menu Item -->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Button
                        Style="{StaticResource ButtonBaseStyle}"
                        HorizontalContentAlignment="Stretch"
                        Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Command}"
                        CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandParameter}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <ContentPresenter
                                Grid.Column="0"
                                HorizontalAlignment="Stretch"
                                ContentSource="Header" />

                            <controls:Chevron
                                Grid.Column="1"
                                Direction="Right"
                                HorizontalAlignment="Right"
                                HorizontalContentAlignment="Right"
                                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasItems, Converter={StaticResource BoolToVisibilityConverter}}" />

                            <!-- Popup for submenu items -->
                            <Popup
                                Grid.Column="1"
                                Placement="Right"
                                IsOpen="{TemplateBinding IsSubmenuOpen}"
                                Focusable="False">
                                <StackPanel IsItemsHost="True" />
                            </Popup>
                        </Grid>
                    </Button>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="IsSubmenuOpen" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ListBox -->
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ControlBaseStyle}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="16"/>
                        </Grid.ColumnDefinitions>

                        <!-- Content area with sunken border -->
                        <controls:BeveledBorder
                            Grid.Column="0"
                            BevelType="Sunken"
                            BorderThickness="{x:Static local:Theme.BeveledBorderThickness}"
                            Margin="0,0,1,0">
                            <ScrollViewer
                                x:Name="PART_ScrollViewer"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden"
                                CanContentScroll="True"
                                Margin="2">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </controls:BeveledBorder>

                        <!-- Custom external scrollbar -->
                        <controls:CustomScrollBar
                            Grid.Column="1"
                            Margin="1,0,0,0"
                            ScrollViewer="{Binding ElementName=PART_ScrollViewer}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
